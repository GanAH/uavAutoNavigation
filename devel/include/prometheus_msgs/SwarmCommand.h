// Generated by gencpp from file prometheus_msgs/SwarmCommand.msg
// DO NOT EDIT!


#ifndef PROMETHEUS_MSGS_MESSAGE_SWARMCOMMAND_H
#define PROMETHEUS_MSGS_MESSAGE_SWARMCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace prometheus_msgs
{
template <class ContainerAllocator>
struct SwarmCommand_
{
  typedef SwarmCommand_<ContainerAllocator> Type;

  SwarmCommand_()
    : header()
    , Command_ID(0)
    , source()
    , Mode(0)
    , swarm_shape(0)
    , swarm_size(0.0)
    , position_ref()
    , velocity_ref()
    , yaw_ref(0.0)  {
      position_ref.assign(0.0);

      velocity_ref.assign(0.0);
  }
  SwarmCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Command_ID(0)
    , source(_alloc)
    , Mode(0)
    , swarm_shape(0)
    , swarm_size(0.0)
    , position_ref()
    , velocity_ref()
    , yaw_ref(0.0)  {
  (void)_alloc;
      position_ref.assign(0.0);

      velocity_ref.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _Command_ID_type;
  _Command_ID_type Command_ID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;

   typedef uint8_t _Mode_type;
  _Mode_type Mode;

   typedef uint8_t _swarm_shape_type;
  _swarm_shape_type swarm_shape;

   typedef float _swarm_size_type;
  _swarm_size_type swarm_size;

   typedef boost::array<float, 3>  _position_ref_type;
  _position_ref_type position_ref;

   typedef boost::array<float, 3>  _velocity_ref_type;
  _velocity_ref_type velocity_ref;

   typedef float _yaw_ref_type;
  _yaw_ref_type yaw_ref;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Idle)
  #undef Idle
#endif
#if defined(_WIN32) && defined(Takeoff)
  #undef Takeoff
#endif
#if defined(_WIN32) && defined(Hold)
  #undef Hold
#endif
#if defined(_WIN32) && defined(Land)
  #undef Land
#endif
#if defined(_WIN32) && defined(Disarm)
  #undef Disarm
#endif
#if defined(_WIN32) && defined(Position_Control)
  #undef Position_Control
#endif
#if defined(_WIN32) && defined(Velocity_Control)
  #undef Velocity_Control
#endif
#if defined(_WIN32) && defined(Accel_Control)
  #undef Accel_Control
#endif
#if defined(_WIN32) && defined(Swarm_Planner)
  #undef Swarm_Planner
#endif
#if defined(_WIN32) && defined(User_Mode1)
  #undef User_Mode1
#endif
#if defined(_WIN32) && defined(One_column)
  #undef One_column
#endif
#if defined(_WIN32) && defined(Triangle)
  #undef Triangle
#endif
#if defined(_WIN32) && defined(One_row)
  #undef One_row
#endif

  enum {
    Idle = 0u,
    Takeoff = 1u,
    Hold = 2u,
    Land = 3u,
    Disarm = 4u,
    Position_Control = 5u,
    Velocity_Control = 6u,
    Accel_Control = 7u,
    Swarm_Planner = 8u,
    User_Mode1 = 9u,
    One_column = 0u,
    Triangle = 1u,
    One_row = 2u,
  };


  typedef boost::shared_ptr< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SwarmCommand_

typedef ::prometheus_msgs::SwarmCommand_<std::allocator<void> > SwarmCommand;

typedef boost::shared_ptr< ::prometheus_msgs::SwarmCommand > SwarmCommandPtr;
typedef boost::shared_ptr< ::prometheus_msgs::SwarmCommand const> SwarmCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prometheus_msgs::SwarmCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prometheus_msgs::SwarmCommand_<ContainerAllocator1> & lhs, const ::prometheus_msgs::SwarmCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Command_ID == rhs.Command_ID &&
    lhs.source == rhs.source &&
    lhs.Mode == rhs.Mode &&
    lhs.swarm_shape == rhs.swarm_shape &&
    lhs.swarm_size == rhs.swarm_size &&
    lhs.position_ref == rhs.position_ref &&
    lhs.velocity_ref == rhs.velocity_ref &&
    lhs.yaw_ref == rhs.yaw_ref;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prometheus_msgs::SwarmCommand_<ContainerAllocator1> & lhs, const ::prometheus_msgs::SwarmCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prometheus_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c0e301b25661c08e1f8fdc7591b161d";
  }

  static const char* value(const ::prometheus_msgs::SwarmCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c0e301b25661c08ULL;
  static const uint64_t static_value2 = 0xe1f8fdc7591b161dULL;
};

template<class ContainerAllocator>
struct DataType< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prometheus_msgs/SwarmCommand";
  }

  static const char* value(const ::prometheus_msgs::SwarmCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 控制命令的编号 防止接收到错误命令， 编号应该逐次递加\n"
"uint32 Command_ID\n"
"\n"
"## 消息来源\n"
"string source\n"
"\n"
"## 控制命令的模式 \n"
"uint8 Mode\n"
"# enum Mode 控制模式枚举\n"
"uint8 Idle=0\n"
"uint8 Takeoff=1\n"
"uint8 Hold=2\n"
"uint8 Land=3\n"
"uint8 Disarm=4\n"
"uint8 Position_Control=5\n"
"uint8 Velocity_Control=6\n"
"uint8 Accel_Control=7\n"
"uint8 Swarm_Planner=8\n"
"uint8 User_Mode1=9\n"
"\n"
"## 控制参考量 \n"
"uint8 swarm_shape\n"
"\n"
"uint8 One_column=0\n"
"uint8 Triangle=1\n"
"uint8 One_row=2\n"
"\n"
"float32 swarm_size\n"
"\n"
"float32[3] position_ref          ## [m]\n"
"float32[3] velocity_ref          ## [m]\n"
"float32 yaw_ref                  ## [rad]\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::prometheus_msgs::SwarmCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Command_ID);
      stream.next(m.source);
      stream.next(m.Mode);
      stream.next(m.swarm_shape);
      stream.next(m.swarm_size);
      stream.next(m.position_ref);
      stream.next(m.velocity_ref);
      stream.next(m.yaw_ref);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwarmCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prometheus_msgs::SwarmCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prometheus_msgs::SwarmCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Command_ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Command_ID);
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "Mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Mode);
    s << indent << "swarm_shape: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swarm_shape);
    s << indent << "swarm_size: ";
    Printer<float>::stream(s, indent + "  ", v.swarm_size);
    s << indent << "position_ref[]" << std::endl;
    for (size_t i = 0; i < v.position_ref.size(); ++i)
    {
      s << indent << "  position_ref[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position_ref[i]);
    }
    s << indent << "velocity_ref[]" << std::endl;
    for (size_t i = 0; i < v.velocity_ref.size(); ++i)
    {
      s << indent << "  velocity_ref[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity_ref[i]);
    }
    s << indent << "yaw_ref: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_ref);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROMETHEUS_MSGS_MESSAGE_SWARMCOMMAND_H
